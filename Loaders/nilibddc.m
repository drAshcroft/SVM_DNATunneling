function [methodinfo,structs,enuminfo,ThunkLibName]=nilibddc
%NILIBDDC Create structures to define interfaces found in 'nilibddc_m'.

%This function was generated by loadlibrary.m parser version 1.1.6.36 on Tue Jul 17 11:40:24 2012
%perl options:'nilibddc_m.i -outfile=nilibddc.m -thunkfile=nilibddc_thunk_pcwin64.c -header=nilibddc_m.h'
ival={cell(1,0)}; % change 0 to the actual number of functions to preallocate the data.
structs=[];enuminfo=[];fcnNum=1;
fcns=struct('name',ival,'calltype',ival,'LHS',ival,'RHS',ival,'alias',ival,'thunkname', ival);
MfilePath=fileparts(mfilename('fullpath'));
ThunkLibName=fullfile(MfilePath,'nilibddc_thunk_pcwin64');
% int __stdcall DDC_CreateFile ( const char * filePath , const char * fileType , const char * name , const char * description , const char * title , const char * author , DDCFileHandle * file ); 
fcns.thunkname{fcnNum}='int32cstringcstringcstringcstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='DDC_CreateFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_AddChannelGroup ( DDCFileHandle file , const char * name , const char * description , DDCChannelGroupHandle * channelGroup ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringvoidPtrThunk';fcns.name{fcnNum}='DDC_AddChannelGroup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_AddChannel ( DDCChannelGroupHandle channelGroup , DDCDataType dataType , const char * name , const char * description , const char * unitString , DDCChannelHandle * channel ); 
fcns.thunkname{fcnNum}='int32int64DDCDataTypecstringcstringcstringvoidPtrThunk';fcns.name{fcnNum}='DDC_AddChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'DDCDataType', 'cstring', 'cstring', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_SaveFile ( DDCFileHandle file ); 
fcns.thunkname{fcnNum}='int32int64Thunk';fcns.name{fcnNum}='DDC_SaveFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
% int __stdcall DDC_CloseFile ( DDCFileHandle file ); 
fcns.thunkname{fcnNum}='int32int64Thunk';fcns.name{fcnNum}='DDC_CloseFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
% int __stdcall DDC_OpenFileEx ( const char * filePath , const char * fileType , int readOnly , DDCFileHandle * file ); 
fcns.thunkname{fcnNum}='int32cstringcstringint32voidPtrThunk';fcns.name{fcnNum}='DDC_OpenFileEx'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int32', 'int64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_RemoveChannelGroup ( DDCChannelGroupHandle channelGroup ); 
fcns.thunkname{fcnNum}='int32int64Thunk';fcns.name{fcnNum}='DDC_RemoveChannelGroup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
% int __stdcall DDC_RemoveChannel ( DDCChannelHandle channel ); 
fcns.thunkname{fcnNum}='int32int64Thunk';fcns.name{fcnNum}='DDC_RemoveChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
% int __stdcall DDC_CloseChannelGroup ( DDCChannelGroupHandle channelGroup ); 
fcns.thunkname{fcnNum}='int32int64Thunk';fcns.name{fcnNum}='DDC_CloseChannelGroup'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
% int __stdcall DDC_CloseChannel ( DDCChannelHandle channel ); 
fcns.thunkname{fcnNum}='int32int64Thunk';fcns.name{fcnNum}='DDC_CloseChannel'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64'};fcnNum=fcnNum+1;
% int __stdcall DDC_OpenFile ( const char * filePath , const char * fileType , DDCFileHandle * file ); 
fcns.thunkname{fcnNum}='int32cstringcstringvoidPtrThunk';fcns.name{fcnNum}='DDC_OpenFile'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'cstring', 'cstring', 'int64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValues ( DDCChannelHandle channel , void * values , unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesTimestampComponents ( DDCChannelHandle channel , unsigned int year [], unsigned int month [], unsigned int day [], unsigned int hour [], unsigned int minute [], unsigned int second [], double milliSecond [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValues ( DDCChannelHandle channel , void * values , unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesTimestampComponents ( DDCChannelHandle channel , unsigned int year [], unsigned int month [], unsigned int day [], unsigned int hour [], unsigned int minute [], unsigned int second [], double milliSecond [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValues ( DDCChannelHandle channel , unsigned int indexOfFirstValueToReplace , void * values , unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint32voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesTimestampComponents ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , unsigned int year [], unsigned int month [], unsigned int day [], unsigned int hour [], unsigned int minute [], unsigned int second [], double milliSecond [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetNumChannelGroups ( DDCFileHandle file , unsigned int * numChannelGroups ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetNumChannelGroups'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroups ( DDCFileHandle file , DDCChannelGroupHandle channelGroupsBuf [], unsigned __int64 numChannelGroups ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_GetChannelGroups'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'int64Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetNumChannels ( DDCChannelGroupHandle channelGroup , unsigned int * numChannels ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetNumChannels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannels ( DDCChannelGroupHandle channelGroup , DDCChannelHandle channelsBuf [], unsigned __int64 numChannels ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_GetChannels'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'int64Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetNumDataValues ( DDCChannelHandle channel , unsigned __int64 * numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetNumDataValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValues ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , void * values ); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValues'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesTimestampComponents ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , unsigned int year [], unsigned int month [], unsigned int day [], unsigned int hour [], unsigned int minute [], unsigned int second [], double milliSecond [], unsigned int weekDay []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataType ( DDCChannelHandle channel , DDCDataType * dataType ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'DDCDataTypePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyTimestampComponents ( DDCFileHandle file , const char * property , unsigned int year , unsigned int month , unsigned int day , unsigned int hour , unsigned int minute , unsigned int second , double milliSecond ); 
fcns.thunkname{fcnNum}='int32int64cstringuint32uint32uint32uint32uint32uint32doubleThunk';fcns.name{fcnNum}='DDC_SetFilePropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFileProperty ( DDCFileHandle file , const char * property , void * value , unsigned __int64 valueSizeInBytes ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtruint64Thunk';fcns.name{fcnNum}='DDC_GetFileProperty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyTimestampComponents ( DDCFileHandle file , const char * property , unsigned int * year , unsigned int * month , unsigned int * day , unsigned int * hour , unsigned int * minute , unsigned int * second , double * milliSecond , unsigned int * weekDay ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFileStringPropertyLength ( DDCFileHandle file , const char * property , unsigned int * length ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFileStringPropertyLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyTimestampComponents ( DDCFileHandle file , const char * property , unsigned int year , unsigned int month , unsigned int day , unsigned int hour , unsigned int minute , unsigned int second , double milliSecond ); 
fcns.thunkname{fcnNum}='int32int64cstringuint32uint32uint32uint32uint32uint32doubleThunk';fcns.name{fcnNum}='DDC_CreateFilePropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_FilePropertyExists ( DDCFileHandle file , const char * property , int * exists ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_FilePropertyExists'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetNumFileProperties ( DDCFileHandle file , unsigned int * numProperties ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetNumFileProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyType ( DDCFileHandle file , const char * property , DDCDataType * dataType ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'DDCDataTypePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyTimestampComponents ( DDCChannelGroupHandle channelGroup , const char * property , unsigned int year , unsigned int month , unsigned int day , unsigned int hour , unsigned int minute , unsigned int second , double milliSecond ); 
fcns.thunkname{fcnNum}='int32int64cstringuint32uint32uint32uint32uint32uint32doubleThunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupProperty ( DDCChannelGroupHandle channelGroup , const char * property , void * value , unsigned __int64 valueSizeInBytes ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtruint64Thunk';fcns.name{fcnNum}='DDC_GetChannelGroupProperty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyTimestampComponents ( DDCChannelGroupHandle channelGroup , const char * property , unsigned int * year , unsigned int * month , unsigned int * day , unsigned int * hour , unsigned int * minute , unsigned int * second , double * milliSecond , unsigned int * weekDay ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupStringPropertyLength ( DDCChannelGroupHandle channelGroup , const char * property , unsigned int * length ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupStringPropertyLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyTimestampComponents ( DDCChannelGroupHandle channelGroup , const char * property , unsigned int year , unsigned int month , unsigned int day , unsigned int hour , unsigned int minute , unsigned int second , double milliSecond ); 
fcns.thunkname{fcnNum}='int32int64cstringuint32uint32uint32uint32uint32uint32doubleThunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_ChannelGroupPropertyExists ( DDCChannelGroupHandle channelGroup , const char * property , int * exists ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_ChannelGroupPropertyExists'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetNumChannelGroupProperties ( DDCChannelGroupHandle channelGroup , unsigned int * numProperties ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetNumChannelGroupProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyType ( DDCChannelGroupHandle channelGroup , const char * property , DDCDataType * dataType ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'DDCDataTypePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyTimestampComponents ( DDCChannelHandle channel , const char * property , unsigned int year , unsigned int month , unsigned int day , unsigned int hour , unsigned int minute , unsigned int second , double milliSecond ); 
fcns.thunkname{fcnNum}='int32int64cstringuint32uint32uint32uint32uint32uint32doubleThunk';fcns.name{fcnNum}='DDC_SetChannelPropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelProperty ( DDCChannelHandle channel , const char * property , void * value , unsigned __int64 valueSizeInBytes ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtruint64Thunk';fcns.name{fcnNum}='DDC_GetChannelProperty'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'voidPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyTimestampComponents ( DDCChannelHandle channel , const char * property , unsigned int * year , unsigned int * month , unsigned int * day , unsigned int * hour , unsigned int * minute , unsigned int * second , double * milliSecond , unsigned int * weekDay ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'uint32Ptr', 'doublePtr', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelStringPropertyLength ( DDCChannelHandle channel , const char * property , unsigned int * length ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelStringPropertyLength'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyTimestampComponents ( DDCChannelHandle channel , const char * property , unsigned int year , unsigned int month , unsigned int day , unsigned int hour , unsigned int minute , unsigned int second , double milliSecond ); 
fcns.thunkname{fcnNum}='int32int64cstringuint32uint32uint32uint32uint32uint32doubleThunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyTimestampComponents'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'uint32', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_ChannelPropertyExists ( DDCChannelHandle channel , const char * property , int * exists ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_ChannelPropertyExists'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetNumChannelProperties ( DDCChannelHandle channel , unsigned int * numProperties ); 
fcns.thunkname{fcnNum}='int32int64voidPtrThunk';fcns.name{fcnNum}='DDC_GetNumChannelProperties'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint32Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyType ( DDCChannelHandle channel , const char * property , DDCDataType * dataType ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyType'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'DDCDataTypePtr'};fcnNum=fcnNum+1;
% const char * __stdcall DDC_GetLibraryErrorDescription ( int errorCode ); 
fcns.thunkname{fcnNum}='cstringint32Thunk';fcns.name{fcnNum}='DDC_GetLibraryErrorDescription'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='cstring'; fcns.RHS{fcnNum}={'int32'};fcnNum=fcnNum+1;
% void __stdcall DDC_FreeMemory ( void * memoryPointer ); 
fcns.thunkname{fcnNum}='voidvoidPtrThunk';fcns.name{fcnNum}='DDC_FreeMemory'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}=[]; fcns.RHS{fcnNum}={'voidPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesUInt8 ( DDCChannelHandle channel , unsigned char values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesInt16 ( DDCChannelHandle channel , short values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'int16Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesInt32 ( DDCChannelHandle channel , long values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'longPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesFloat ( DDCChannelHandle channel , float values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'singlePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesDouble ( DDCChannelHandle channel , double values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetDataValuesString ( DDCChannelHandle channel , const char * values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_SetDataValuesString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'stringPtrPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesUInt8 ( DDCChannelHandle channel , unsigned char values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesInt16 ( DDCChannelHandle channel , short values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'int16Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesInt32 ( DDCChannelHandle channel , long values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'longPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesFloat ( DDCChannelHandle channel , float values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'singlePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesDouble ( DDCChannelHandle channel , double values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_AppendDataValuesString ( DDCChannelHandle channel , const char * values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_AppendDataValuesString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'stringPtrPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesUInt8 ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , unsigned char values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint8Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesInt16 ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , short values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'int16Ptr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesInt32 ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , long values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'longPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesFloat ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , float values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'singlePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesDouble ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , double values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'doublePtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_ReplaceDataValuesString ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToReplace , const char * values [], unsigned __int64 numValues ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtruint64Thunk';fcns.name{fcnNum}='DDC_ReplaceDataValuesString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'stringPtrPtr', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesUInt8 ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , unsigned char values []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'uint8Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesInt16 ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , short values []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'int16Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesInt32 ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , long values []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'longPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesFloat ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , float values []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'singlePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesDouble ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , double values []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'doublePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetDataValuesString ( DDCChannelHandle channel , unsigned __int64 indexOfFirstValueToGet , unsigned __int64 numValuesToGet , char * values []); 
fcns.thunkname{fcnNum}='int32int64uint64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetDataValuesString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64', 'stringPtrPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyUInt8 ( DDCFileHandle file , const char * property , unsigned char value ); 
fcns.thunkname{fcnNum}='int32int64cstringuint8Thunk';fcns.name{fcnNum}='DDC_CreateFilePropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyInt16 ( DDCFileHandle file , const char * property , short value ); 
fcns.thunkname{fcnNum}='int32int64cstringint16Thunk';fcns.name{fcnNum}='DDC_CreateFilePropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyInt32 ( DDCFileHandle file , const char * property , long value ); 
fcns.thunkname{fcnNum}='int32int64cstringlongThunk';fcns.name{fcnNum}='DDC_CreateFilePropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyFloat ( DDCFileHandle file , const char * property , float value ); 
fcns.thunkname{fcnNum}='int32int64cstringfloatThunk';fcns.name{fcnNum}='DDC_CreateFilePropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'single'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyDouble ( DDCFileHandle file , const char * property , double value ); 
fcns.thunkname{fcnNum}='int32int64cstringdoubleThunk';fcns.name{fcnNum}='DDC_CreateFilePropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateFilePropertyString ( DDCFileHandle file , const char * property , const char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringThunk';fcns.name{fcnNum}='DDC_CreateFilePropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyUInt8 ( DDCFileHandle file , const char * property , unsigned char value ); 
fcns.thunkname{fcnNum}='int32int64cstringuint8Thunk';fcns.name{fcnNum}='DDC_SetFilePropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyInt16 ( DDCFileHandle file , const char * property , short value ); 
fcns.thunkname{fcnNum}='int32int64cstringint16Thunk';fcns.name{fcnNum}='DDC_SetFilePropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyInt32 ( DDCFileHandle file , const char * property , long value ); 
fcns.thunkname{fcnNum}='int32int64cstringlongThunk';fcns.name{fcnNum}='DDC_SetFilePropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyFloat ( DDCFileHandle file , const char * property , float value ); 
fcns.thunkname{fcnNum}='int32int64cstringfloatThunk';fcns.name{fcnNum}='DDC_SetFilePropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'single'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyDouble ( DDCFileHandle file , const char * property , double value ); 
fcns.thunkname{fcnNum}='int32int64cstringdoubleThunk';fcns.name{fcnNum}='DDC_SetFilePropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetFilePropertyString ( DDCFileHandle file , const char * property , const char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringThunk';fcns.name{fcnNum}='DDC_SetFilePropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyUInt8 ( DDCFileHandle file , const char * property , unsigned char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyInt16 ( DDCFileHandle file , const char * property , short * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyInt32 ( DDCFileHandle file , const char * property , long * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyFloat ( DDCFileHandle file , const char * property , float * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'singlePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyDouble ( DDCFileHandle file , const char * property , double * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyString ( DDCFileHandle file , const char * property , char value [], unsigned __int64 valueSize ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringuint64Thunk';fcns.name{fcnNum}='DDC_GetFilePropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyUInt8 ( DDCChannelGroupHandle channelGroup , const char * property , unsigned char value ); 
fcns.thunkname{fcnNum}='int32int64cstringuint8Thunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyInt16 ( DDCChannelGroupHandle channelGroup , const char * property , short value ); 
fcns.thunkname{fcnNum}='int32int64cstringint16Thunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyInt32 ( DDCChannelGroupHandle channelGroup , const char * property , long value ); 
fcns.thunkname{fcnNum}='int32int64cstringlongThunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyFloat ( DDCChannelGroupHandle channelGroup , const char * property , float value ); 
fcns.thunkname{fcnNum}='int32int64cstringfloatThunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'single'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyDouble ( DDCChannelGroupHandle channelGroup , const char * property , double value ); 
fcns.thunkname{fcnNum}='int32int64cstringdoubleThunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelGroupPropertyString ( DDCChannelGroupHandle channelGroup , const char * property , const char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringThunk';fcns.name{fcnNum}='DDC_CreateChannelGroupPropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyUInt8 ( DDCChannelGroupHandle channelGroup , const char * property , unsigned char value ); 
fcns.thunkname{fcnNum}='int32int64cstringuint8Thunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyInt16 ( DDCChannelGroupHandle channelGroup , const char * property , short value ); 
fcns.thunkname{fcnNum}='int32int64cstringint16Thunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyInt32 ( DDCChannelGroupHandle channelGroup , const char * property , long value ); 
fcns.thunkname{fcnNum}='int32int64cstringlongThunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyFloat ( DDCChannelGroupHandle channelGroup , const char * property , float value ); 
fcns.thunkname{fcnNum}='int32int64cstringfloatThunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'single'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyDouble ( DDCChannelGroupHandle channelGroup , const char * property , double value ); 
fcns.thunkname{fcnNum}='int32int64cstringdoubleThunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelGroupPropertyString ( DDCChannelGroupHandle channelGroup , const char * property , const char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringThunk';fcns.name{fcnNum}='DDC_SetChannelGroupPropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyUInt8 ( DDCChannelGroupHandle channelGroup , const char * property , unsigned char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyInt16 ( DDCChannelGroupHandle channelGroup , const char * property , short * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyInt32 ( DDCChannelGroupHandle channelGroup , const char * property , long * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyFloat ( DDCChannelGroupHandle channelGroup , const char * property , float * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'singlePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyDouble ( DDCChannelGroupHandle channelGroup , const char * property , double * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyString ( DDCChannelGroupHandle channelGroup , const char * property , char value [], unsigned __int64 valueSize ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringuint64Thunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyUInt8 ( DDCChannelHandle channel , const char * property , unsigned char value ); 
fcns.thunkname{fcnNum}='int32int64cstringuint8Thunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyInt16 ( DDCChannelHandle channel , const char * property , short value ); 
fcns.thunkname{fcnNum}='int32int64cstringint16Thunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyInt32 ( DDCChannelHandle channel , const char * property , long value ); 
fcns.thunkname{fcnNum}='int32int64cstringlongThunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyFloat ( DDCChannelHandle channel , const char * property , float value ); 
fcns.thunkname{fcnNum}='int32int64cstringfloatThunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'single'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyDouble ( DDCChannelHandle channel , const char * property , double value ); 
fcns.thunkname{fcnNum}='int32int64cstringdoubleThunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_CreateChannelPropertyString ( DDCChannelHandle channel , const char * property , const char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringThunk';fcns.name{fcnNum}='DDC_CreateChannelPropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyUInt8 ( DDCChannelHandle channel , const char * property , unsigned char value ); 
fcns.thunkname{fcnNum}='int32int64cstringuint8Thunk';fcns.name{fcnNum}='DDC_SetChannelPropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyInt16 ( DDCChannelHandle channel , const char * property , short value ); 
fcns.thunkname{fcnNum}='int32int64cstringint16Thunk';fcns.name{fcnNum}='DDC_SetChannelPropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyInt32 ( DDCChannelHandle channel , const char * property , long value ); 
fcns.thunkname{fcnNum}='int32int64cstringlongThunk';fcns.name{fcnNum}='DDC_SetChannelPropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'long'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyFloat ( DDCChannelHandle channel , const char * property , float value ); 
fcns.thunkname{fcnNum}='int32int64cstringfloatThunk';fcns.name{fcnNum}='DDC_SetChannelPropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'single'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyDouble ( DDCChannelHandle channel , const char * property , double value ); 
fcns.thunkname{fcnNum}='int32int64cstringdoubleThunk';fcns.name{fcnNum}='DDC_SetChannelPropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'double'};fcnNum=fcnNum+1;
% int __stdcall DDC_SetChannelPropertyString ( DDCChannelHandle channel , const char * property , const char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringThunk';fcns.name{fcnNum}='DDC_SetChannelPropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyUInt8 ( DDCChannelHandle channel , const char * property , unsigned char * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyUInt8'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'uint8Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyInt16 ( DDCChannelHandle channel , const char * property , short * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyInt16'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'int16Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyInt32 ( DDCChannelHandle channel , const char * property , long * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyInt32'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'longPtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyFloat ( DDCChannelHandle channel , const char * property , float * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyFloat'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'singlePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyDouble ( DDCChannelHandle channel , const char * property , double * value ); 
fcns.thunkname{fcnNum}='int32int64cstringvoidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyDouble'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'doublePtr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyString ( DDCChannelHandle channel , const char * property , char value [], unsigned __int64 valueSize ); 
fcns.thunkname{fcnNum}='int32int64cstringcstringuint64Thunk';fcns.name{fcnNum}='DDC_GetChannelPropertyString'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'cstring', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyNameFromIndex ( DDCFileHandle file , unsigned __int64 index , char propertyName [], unsigned __int64 propertyNameSize ); 
fcns.thunkname{fcnNum}='int32int64uint64cstringuint64Thunk';fcns.name{fcnNum}='DDC_GetFilePropertyNameFromIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetFilePropertyNameLengthFromIndex ( DDCFileHandle file , unsigned __int64 index , unsigned __int64 * propertyNameLength ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetFilePropertyNameLengthFromIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyNameFromIndex ( DDCChannelGroupHandle channelGroup , unsigned __int64 index , char propertyName [], unsigned __int64 propertyNameSize ); 
fcns.thunkname{fcnNum}='int32int64uint64cstringuint64Thunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyNameFromIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelGroupPropertyNameLengthFromIndex ( DDCChannelGroupHandle channelGroup , unsigned __int64 index , unsigned __int64 * propertyNameLength ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelGroupPropertyNameLengthFromIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyNameFromIndex ( DDCChannelHandle channel , unsigned __int64 index , char propertyName [], unsigned __int64 propertyNameSize ); 
fcns.thunkname{fcnNum}='int32int64uint64cstringuint64Thunk';fcns.name{fcnNum}='DDC_GetChannelPropertyNameFromIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'cstring', 'uint64'};fcnNum=fcnNum+1;
% int __stdcall DDC_GetChannelPropertyNameLengthFromIndex ( DDCChannelHandle channel , unsigned __int64 index , unsigned __int64 * propertyNameLength ); 
fcns.thunkname{fcnNum}='int32int64uint64voidPtrThunk';fcns.name{fcnNum}='DDC_GetChannelPropertyNameLengthFromIndex'; fcns.calltype{fcnNum}='Thunk'; fcns.LHS{fcnNum}='int32'; fcns.RHS{fcnNum}={'int64', 'uint64', 'uint64Ptr'};fcnNum=fcnNum+1;
enuminfo.DDCError=struct('DDC_NoError',0,'DDC_ErrorBegin',-6201,'DDC_OutOfMemory',-6201,'DDC_InvalidArgument',-6202,'DDC_InvalidDataType',-6203,'DDC_UnexpectedError',-6204,'DDC_UsiCouldNotBeLoaded',-6205,'DDC_InvalidFileHandle',-6206,'DDC_InvalidChannelGroupHandle',-6207,'DDC_InvalidChannelHandle',-6208,'DDC_FileDoesNotExist',-6209,'DDC_CannotWriteToReadOnlyFile',-6210,'DDC_StorageCouldNotBeOpened',-6211,'DDC_FileAlreadyExists',-6212,'DDC_PropertyDoesNotExist',-6213,'DDC_PropertyDoesNotContainData',-6214,'DDC_PropertyIsNotAScalar',-6215,'DDC_DataObjectTypeNotFound',-6216,'DDC_NotImplemented',-6217,'DDC_CouldNotSaveFile',-6218,'DDC_MaximumNumberOfDataValuesExceeded',-6219,'DDC_InvalidChannelName',-6220,'DDC_DuplicateChannelName',-6221,'DDC_DataTypeNotSupported',-6222,'DDC_FileAccessDenied',-6224,'DDC_InvalidTimeValue',-6225,'DDC_ReplaceNotSupportedForSavedTDMSData',-6226,'DDC_PropertyDataTypeMismatch',-6227,'DDC_ChannelDataTypeMismatch',-6228,'DDC_ErrorEnd',-6228,'DDC_ErrorForceSizeTo32Bits',4294967295);
enuminfo.DDCDataType=struct('DDC_UInt8',5,'DDC_Int16',2,'DDC_Int32',3,'DDC_Float',9,'DDC_Double',10,'DDC_String',23,'DDC_Timestamp',30);
methodinfo=fcns;